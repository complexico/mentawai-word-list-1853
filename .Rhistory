ordering = NULL)
ortho$strings <- ortho$strings |>
rename(Mentawai = originals,
Commons = transliterated) |>
as_tibble() |>
mutate(ID = mentawai1853$ID)
ortho$strings
ortho$strings |>
rename(Mentawai = originals,
Commons = transliterated) |>
as_tibble() |>
mutate(ID = mentawai1853$ID) |>
# add the non-tokenised common transcription
mutate(CommonsNotSegmented = str_replace_all(Commons, " ", ""))
ortho <- qlcData::tokenize(mentawai1853$Mentawai,
profile = "data/ortho-profile-mentawai1853.tsv",
transliterate = "Replacement",
sep.replace = "_",
regex = TRUE,
ordering = NULL)
ortho$strings |>
rename(Mentawai = originals,
Commons = transliterated) |>
as_tibble() |>
mutate(ID = mentawai1853$ID) |>
# add the non-tokenised common transcription
mutate(CommonsNotSegmented = str_replace_all(Commons, " ", ""))
ortho$strings |>
rename(Mentawai = originals,
Commons = transliterated) |>
as_tibble() |>
mutate(ID = mentawai1853$ID) |>
# add the non-tokenised common transcription
mutate(CommonsNotSegmented = str_replace_all(Commons, " ", ""),
CommonsNotSegmented = str_replace_all(CommonsNonSegmented, "_", " "))
ortho$strings |>
rename(Mentawai = originals,
Commons = transliterated) |>
as_tibble() |>
mutate(ID = mentawai1853$ID) |>
# add the non-tokenised common transcription
mutate(CommonsNotSegmented = str_replace_all(Commons, " ", ""),
CommonsNotSegmented = str_replace_all(CommonsNotSegmented, "_", " "))
ortho <- qlcData::tokenize(mentawai1853$Mentawai,
profile = "data/ortho-profile-mentawai1853.tsv",
transliterate = "Replacement",
sep.replace = "_",
regex = TRUE,
ordering = NULL)
ortho$strings <- ortho$strings |>
rename(Mentawai = originals,
Commons = transliterated) |>
as_tibble() |>
mutate(ID = mentawai1853$ID) |>
# add the non-tokenised common transcription
mutate(CommonsNotSegmented = str_replace_all(Commons, " ", ""),
CommonsNotSegmented = str_replace_all(CommonsNotSegmented, "_", " "))
ipa <- qlcData::tokenize(mentawai1853$Mentawai,
profile = "data/ortho-profile-mentawai1853.tsv",
transliterate = "Phoneme",
sep.replace = "_",
regex = TRUE,
ordering = NULL)
ipa$strings |>
rename(Mentawai = originals,
IPA = transliterated) |>
as_tibble() |>
mutate(ID = mentawai1853$ID) |>
# add the non-tokenised IPA transcription
mutate(IPAnotSegmented = str_replace_all(IPA, " ", ""),
IPAnotSegmented = str_replace_all(IPAnotSegmented, "_", " "))
ortho <- qlcData::tokenize(mentawai1853$Mentawai,
profile = "data/ortho-profile-mentawai1853.tsv",
transliterate = "Replacement",
sep.replace = "_",
regex = TRUE,
ordering = NULL)
ortho$strings |>
rename(Mentawai = originals,
Commons = transliterated) |>
as_tibble() |>
mutate(ID = mentawai1853$ID)
ipa <- qlcData::tokenize(mentawai1853$Mentawai,
profile = "data/ortho-profile-mentawai1853.tsv",
transliterate = "Phoneme",
sep.replace = "_",
regex = TRUE,
ordering = NULL)
ipa$strings |>
rename(Mentawai = originals,
IPA = transliterated) |>
as_tibble() |>
mutate(ID = mentawai1853$ID)
ipa <- qlcData::tokenize(mentawai1853$Mentawai,
profile = "data/ortho-profile-mentawai1853.tsv",
transliterate = "Phoneme",
sep.replace = "_",
regex = TRUE,
ordering = NULL)
ipa$strings |>
rename(Mentawai = originals,
IPA = transliterated) |>
as_tibble() |>
mutate(ID = mentawai1853$ID) |>
# add the non-tokenised IPA transcription
mutate(IPAnotSegmented = str_replace_all(IPA, " ", ""),
IPAnotSegmented = str_replace_all(IPAnotSegmented, "_", " "))
ortho <- qlcData::tokenize(mentawai1853$Mentawai,
profile = "data/ortho-profile-mentawai1853.tsv",
transliterate = "Replacement",
sep.replace = "_",
regex = TRUE,
ordering = NULL)
ortho$strings <- ortho$strings |>
rename(Mentawai = originals,
Commons = transliterated) |>
as_tibble() |>
mutate(ID = mentawai1853$ID) |>
# add the non-tokenised common transcription
mutate(CommonsNotSegmented = str_replace_all(Commons, " ", ""),
CommonsNotSegmented = str_replace_all(CommonsNotSegmented, "_", " "))
ipa <- qlcData::tokenize(mentawai1853$Mentawai,
profile = "data/ortho-profile-mentawai1853.tsv",
transliterate = "Phoneme",
sep.replace = "_",
regex = TRUE,
ordering = NULL)
ipa$strings <- ipa$strings |>
rename(Mentawai = originals,
IPA = transliterated) |>
as_tibble() |>
mutate(ID = mentawai1853$ID) |>
# add the non-tokenised IPA transcription
mutate(IPAnotSegmented = str_replace_all(IPA, " ", ""),
IPAnotSegmented = str_replace_all(IPAnotSegmented, "_", " "))
ipa$strings
ipa <- qlcData::tokenize(mentawai1853$Mentawai,
profile = "data/ortho-profile-mentawai1853.tsv",
transliterate = "Phoneme",
sep.replace = "_",
regex = TRUE,
ordering = NULL)
ipa$strings |>
rename(Mentawai = originals,
IPA = transliterated) |>
as_tibble() |>
mutate(ID = mentawai1853$ID) |>
# add the non-tokenised IPA transcription
mutate(IPAnotSegmented = str_replace_all(IPA, " ", ""))
ipa <- qlcData::tokenize(mentawai1853$Mentawai,
profile = "data/ortho-profile-mentawai1853.tsv",
transliterate = "Phoneme",
sep.replace = "_",
regex = TRUE,
ordering = NULL)
ipa$strings |>
rename(Mentawai = originals,
IPA = transliterated) |>
as_tibble()
qlcData::tokenize(mentawai1853$Mentawai,
profile = "data/ortho-profile-mentawai1853.tsv",
transliterate = "Phoneme",
sep.replace = "_",
regex = TRUE,
ordering = NULL)
qlcData::tokenize(mentawai1853$Mentawai,
profile = "data/ortho-profile-mentawai1853.tsv",
transliterate = "Replacement",
sep.replace = "_",
regex = TRUE,
ordering = NULL)
ortho <- qlcData::tokenize(mentawai1853$Mentawai,
profile = "data/ortho-profile-mentawai1853.tsv",
transliterate = "Replacement",
sep.replace = "_",
regex = TRUE,
ordering = NULL)
ortho$strings <- ortho$strings |>
rename(Mentawai = originals,
Commons = transliterated) |>
as_tibble() |>
mutate(ID = mentawai1853$ID) |>
# add the non-tokenised common transcription
mutate(CommonsNotSegmented = str_replace_all(Commons, " ", ""),
CommonsNotSegmented = str_replace_all(CommonsNotSegmented, "_", " "))
ipa <- qlcData::tokenize(mentawai1853$Mentawai,
profile = "data/ortho-profile-mentawai1853.tsv",
transliterate = "Phoneme",
sep.replace = "_",
regex = TRUE,
ordering = NULL)
ipa$strings
ipa <- qlcData::tokenize(mentawai1853$Mentawai,
profile = "data/ortho-profile-mentawai1853.tsv",
transliterate = "Phoneme",
sep.replace = "#",
regex = TRUE,
ordering = NULL)
ipa$strings |>
rename(Mentawai = originals,
IPA = transliterated) |>
as_tibble() |>
mutate(ID = mentawai1853$ID)
ipa <- qlcData::tokenize(mentawai1853$Mentawai,
profile = "data/ortho-profile-mentawai1853.tsv",
transliterate = "Phoneme",
sep.replace = "_",
regex = TRUE,
ordering = NULL)
ipa$strings |>
rename(Mentawai = originals,
IPA = transliterated) |>
as_tibble() |>
mutate(ID = mentawai1853$ID)
ipa <- qlcData::tokenize(mentawai1853$Mentawai,
profile = "data/ortho-profile-mentawai1853.tsv",
transliterate = "Phoneme",
sep.replace = "_",
regex = TRUE,
ordering = NULL)
ipa$strings |>
rename(Mentawai = originals,
IPA = transliterated) |>
as_tibble() |>
mutate(ID = mentawai1853$ID)
ipa$strings <- ipa$strings |>
rename(Mentawai = originals,
IPA = transliterated) |>
as_tibble() |>
mutate(ID = mentawai1853$ID) |>
# add the non-tokenised IPA transcription
mutate(IPAnotSegmented = str_replace_all(IPA, " ", ""),
IPAnotSegmented = str_replace_all(IPAnotSegmented, "_", " "))
ipa$strings
mentawai1853 <- read_sheet(mentawai1853_sheet) |>
mutate(ID = row_number()) # give entry ID
# translate the Dutch gloss with deeplr <- CODE to translate the Dutch into English using DeepL API
# dutch <- mentawai1853 |>
#   select(ID, Dutch) |>
#   filter(!is.na(Dutch))
# dutch <- dutch |>
#   mutate(English_DeepL2 = deeplr::translate2(text = Dutch, target_lang = "EN", source_lang = "NL", auth_key = deeplauthkey))
# write_tsv(dutch, "data/dutch-translated-to-english-with-deepl.tsv") <- This file is manually edited together with the edited Concepticon mapping file
# read the English translation of the Dutch gloss
dutch <- read_tsv("data/dutch-translated-to-english-with-deepl.tsv") |>
mutate(untranslated = Dutch == English_DeepL2)
# join the English translation of the Dutch gloss with the main word list table
mentawai1853 <- mentawai1853 |>
left_join(dutch) |>
mutate(English_DeepL2 = if_else(untranslated, English_DeepL, English_DeepL2)) |>
mutate(eng_diff = English_DeepL != English_DeepL2)
# this is a testing code to check which original translation is different from the DeepL
mentawai1853 |>
mutate(eng_diff = English_DeepL != English_DeepL2) |>
filter(eng_diff) |>
select(English_DeepL, English_DeepL2, Dutch) |>
as.data.frame()
# read the Concepticon mapping file
concepticon <- read_tsv("data/mentawai-gloss-mapped-to-edit_1853-270.tsv") |>
filter(GLOSS != "#") |>
select(-NUMBER) |>
distinct() |>
mutate(across(where(is.character), ~replace_na(., "")))
# join the Concepticon mapping with the main word list table
mentawai1853 <- mentawai1853 |>
left_join(concepticon |>
rename(English_DeepL2 = GLOSS))
# exclude the irrelevant columns
mentawai1853 <- mentawai1853 |>
select(-untranslated, -eng_diff, -English_DeepL) |>
select(ID, Mentawai, Dutch, English = English_DeepL2, CONCEPTICON_GLOSS, CONCEPTICON_ID, everything())
# save the main word list data containing the English translation and Concepticon Mapping
## the saved files still combine the three categories of word list
mentawai1853 |>
write_tsv("data/mentawai1853.tsv")
mentawai1853 |>
write_rds("data/mentawai1853.rds")
# save the comparison table in p. 434 into .tsv
# read_tsv("data/vrosenberg1853p434.csv") |>
#   write_tsv("data/vrosenberg1853p434.tsv")
# run orthography profile =====
# write the profile and manually edit it.
# mentawai1853$Mentawai |>
#   qlcData::write.profile(normalize = "NFC",
#                          editing = TRUE,
#                          info = TRUE,
#                          file.out = "data/ortho-profile-mentawai1853.tsv")
ortho <- qlcData::tokenize(mentawai1853$Mentawai,
profile = "data/ortho-profile-mentawai1853.tsv",
transliterate = "Replacement",
sep.replace = "_",
regex = TRUE,
ordering = NULL)
ortho$strings <- ortho$strings |>
rename(Mentawai = originals,
Commons = transliterated) |>
as_tibble() |>
mutate(ID = mentawai1853$ID) |>
# add the non-tokenised common transcription
mutate(CommonsNotSegmented = str_replace_all(Commons, " ", ""),
CommonsNotSegmented = str_replace_all(CommonsNotSegmented, "_", " "))
ipa <- qlcData::tokenize(mentawai1853$Mentawai,
profile = "data/ortho-profile-mentawai1853.tsv",
transliterate = "Phoneme",
sep.replace = "_",
regex = TRUE,
ordering = NULL)
ipa$strings <- ipa$strings |>
rename(Mentawai = originals,
IPA = transliterated) |>
as_tibble() |>
mutate(ID = mentawai1853$ID) |>
# add the non-tokenised IPA transcription
mutate(IPAnotSegmented = str_replace_all(IPA, " ", ""),
IPAnotSegmented = str_replace_all(IPAnotSegmented, "_", " "))
mentawai1853 <- mentawai1853 |>
left_join(ortho$strings |>
select(-tokenized, -Mentawai),
by = join_by(ID)) |>
left_join(ipa$strings |>
select(-tokenized, -Mentawai),
by = join_by(ID)) |>
select(ID, Mentawai, Commons, CommonsNotSegmented, IPA, IPAnotSegmented, Dutch, English, everything()) |>
# add the doculect for the CLDF purpose
mutate(Doculect = "Mentawai")
mentawai1853
# split the comparison dialect word list and men's names and save the respective files
# mentawai1853 <- read_rds("data/mentawai1853.rds")
mentawai1853 |>
filter(Category == "word list") |>
write_tsv("data/mentawai1853.tsv")
mentawai1853 |>
filter(Category == "word list") |>
write_tsv("raw/mentawai1853.tsv")
mentawai1853 |>
filter(Category == "word list") |>
write_tsv("data/mentawai1853.rds")
mentawai1853 |>
filter(Category == "dialect-comparison") |>
write_tsv("data/mentawai1853-dialect-comparison.tsv")
mentawai1853 |>
filter(Category == "men's names") |>
write_tsv("data/mentawai1853-men-names.tsv")
mentawai1853
mentawai1853
mentawai1853 |> filter(CONCEPTICON_GLOSS == NA)
mentawai1853 |> filter(is.na(CONCEPTICON_GLOSS))
mentawai1853 |>
filter(Category == "word list") |>  filter(is.na(CONCEPTICON_GLOSS))
## for CLDF raw directory
mentawai1853 |>
filter(Category == "word list") |>
mutate(CONCEPTICON_ID = replace(CONCEPTICON_ID, CONCEPTICON_ID == 0, "")) |>
write_tsv("raw/mentawai1853.tsv")
df <- read_csv("cldf/forms.csv")
df
df |> select(Value)
df |> select(Value)
df
df |> select(Value, Form, Segments)
df <- read_csv("cldf/forms.csv")
df |> select(Value, Form, Segments)
df <- read_csv("cldf/forms.csv")
df |> select(Value, Form)
df <- read_csv("cldf/forms.csv")
df
read_tsv("data/ortho-profile-mentawai1853.tsv")
read_tsv("data/ortho-profile-mentawai1853.tsv") |> select(Grapheme = Replacement, IPA = Phoneme)
read_tsv("data/ortho-profile-mentawai1853.tsv") |> select(Grapheme = Replacement, IPA = Phoneme) |> as.data.frame()
read_tsv("data/ortho-profile-mentawai1853.tsv", na = " ") |> select(Grapheme = Replacement, IPA = Phoneme) |> as.data.frame()
read_tsv("data/ortho-profile-mentawai1853.tsv", na = "") |> select(Grapheme = Replacement, IPA = Phoneme) |> as.data.frame()
read_tsv("data/ortho-profile-mentawai1853.tsv", na = c("NA", " ")) |> select(Grapheme = Replacement, IPA = Phoneme) |> as.data.frame()
read_tsv("data/ortho-profile-mentawai1853.tsv") |>
select(Grapheme = Replacement, IPA = Phoneme) |>
mutate(across(where(is.character), ~replace_na(., " ")))
read_tsv("data/ortho-profile-mentawai1853.tsv") |>
select(Grapheme = Replacement, IPA = Phoneme) |>
mutate(across(where(is.character), ~replace_na(., " "))) |> as.data.frame()
dir.exists("etc")
# for CLDF etc folder to include the orthography profile
## assumming we already have the IPA match of the grapheme as well! AND the `etc` folder exists
if (dir.exists("etc")) {
message("The `etc` directory exists.")
read_tsv("data/ortho-profile-mentawai1853.tsv") |>
select(Grapheme = Replacement, IPA = Phoneme) |>
mutate(across(where(is.character), ~replace_na(., " "))) |>
write_tsv("etc/orthography.tsv", na = "")
} else {
warning("No `etc` directory is detected! Create one.")
}
# for CLDF etc folder to include the orthography profile
## assumming we already have the IPA match of the grapheme as well! AND the `etc` folder exists
if (dir.exists("etc")) {
message("The `etc` directory exists.")
read_tsv("data/ortho-profile-mentawai1853.tsv") |>
select(Grapheme = Replacement, IPA = Phoneme) |>
mutate(across(where(is.character), ~replace_na(., " "))) |>
write_tsv("etc/orthography.tsv", na = "")
message("Save the orthography profile into `etc`.")
} else {
warning("No `etc` directory is detected! Create one.")
}
read_tsv("data/ortho-profile-mentawai1853.tsv") |>
select(Grapheme = Replacement, IPA = Phoneme) |>
mutate(across(where(is.character), ~replace_na(., " "))) |>
distinct()
# for CLDF etc folder to include the orthography profile
## assumming we already have the IPA match of the grapheme as well! AND the `etc` folder exists
if (dir.exists("etc")) {
message("The `etc` directory exists.")
read_tsv("data/ortho-profile-mentawai1853.tsv") |>
select(Grapheme = Replacement, IPA = Phoneme) |>
mutate(across(where(is.character), ~replace_na(., " "))) |>
distinct() |>
write_tsv("etc/orthography.tsv", na = "")
message("Save the orthography profile into `etc`.")
} else {
warning("No `etc` directory is detected! Create one.")
}
read_tsv("data/ortho-profile-mentawai1853.tsv")
read_tsv("data/ortho-profile-mentawai1853.tsv") |>
# select(Grapheme = Replacement, IPA = Phoneme) |>
# mutate(across(where(is.character), ~replace_na(., " "))) |>
# distinct() |>
mutate(Grapheme = if_else(!is.na(Right),
paste(Grapheme, Right, sep = ""),
Grapheme),
Grapheme = if_else(!is.na(Left),
paste(Left, Grapheme, sep = ""),
Grapheme))
read_tsv("data/ortho-profile-mentawai1853.tsv") |>
# select(Grapheme = Replacement, IPA = Phoneme) |>
# mutate(across(where(is.character), ~replace_na(., " "))) |>
# distinct() |>
mutate(Grapheme = if_else(!is.na(Right),
paste(Grapheme, Right, sep = ""),
Grapheme),
Grapheme = if_else(!is.na(Left),
paste(Left, Grapheme, sep = ""),
Grapheme)) |>
select(Grapheme, Phoneme) |>
as.data.frame()
read_tsv("data/ortho-profile-mentawai1853.tsv") |>
# select(Grapheme = Replacement, IPA = Phoneme) |>
# mutate(across(where(is.character), ~replace_na(., " "))) |>
# distinct() |>
mutate(Grapheme = if_else(!is.na(Right),
paste(Grapheme, Right, sep = ""),
Grapheme),
Grapheme = if_else(!is.na(Left),
paste(Left, Grapheme, sep = ""),
Grapheme)) |>
select(Grapheme, Phoneme) |>
mutate(across(where(is.character), ~replace_na(., " "))) |>
write_tsv("etc/orthography.tsv", na = "")
# for CLDF etc folder to include the orthography profile
## assumming we already have the IPA match of the grapheme as well! AND the `etc` folder exists
if (dir.exists("etc")) {
message("The `etc` directory exists.")
read_tsv("data/ortho-profile-mentawai1853.tsv") |>
# select(Grapheme = Replacement, IPA = Phoneme) |>
# mutate(across(where(is.character), ~replace_na(., " "))) |>
# distinct() |>
mutate(Grapheme = if_else(!is.na(Right),
paste(Grapheme, Right, sep = ""),
Grapheme),
Grapheme = if_else(!is.na(Left),
paste(Left, Grapheme, sep = ""),
Grapheme)) |>
select(Grapheme, Phoneme) |>
mutate(across(where(is.character), ~replace_na(., " "))) |>
write_tsv("etc/orthography.tsv", na = "")
message("Save the orthography profile into `etc`.")
} else {
warning("No `etc` directory is detected! Create one.")
}
library(tidyverse)
library(googlesheets4)
library(deeplr)
library(googleLanguageR)
# get the Google Sheet link
source("codes/mentawai1853_00-gsheet.R")
mentawai1853 <- read_sheet(mentawai1853_sheet) |>
mutate(ID = row_number()) # give
# read the English translation of the Dutch gloss
dutch <- read_tsv("data/dutch-translated-to-english-with-deepl.tsv") |>
mutate(untranslated = Dutch == English_DeepL2)
# join the English translation of the Dutch gloss with the main word list table
mentawai1853 <- mentawai1853 |>
left_join(dutch) |>
mutate(English_DeepL2 = if_else(untranslated, English_DeepL, English_DeepL2)) |>
mutate(eng_diff = English_DeepL != English_DeepL2)
# this is a testing code to check which original translation is different from the DeepL
mentawai1853 |>
mutate(eng_diff = English_DeepL != English_DeepL2) |>
filter(eng_diff) |>
select(English_DeepL, English_DeepL2, Dutch) |>
as.data.frame()
# read the Concepticon mapping file
concepticon <- read_tsv("data/mentawai-gloss-mapped-to-edit_1853-270.tsv") |>
filter(GLOSS != "#") |>
select(-NUMBER) |>
distinct() |>
mutate(across(where(is.character), ~replace_na(., "")))
# join the Concepticon mapping with the main word list table
mentawai1853 <- mentawai1853 |>
left_join(concepticon |>
rename(English_DeepL2 = GLOSS))
# exclude the irrelevant columns
mentawai1853 <- mentawai1853 |>
select(-untranslated, -eng_diff, -English_DeepL) |>
select(ID, Mentawai, Dutch, English = English_DeepL2, CONCEPTICON_GLOSS, CONCEPTICON_ID, everything())
